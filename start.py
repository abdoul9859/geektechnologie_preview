#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application GEEK TECHNOLOGIE
"""

import uvicorn
import os
import sys
import time
from pathlib import Path

# Ajouter le r√©pertoire racine au PYTHONPATH
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

def wait_for_database():
    """Attendre que la base de donn√©es soit pr√™te"""
    print("‚è≥ Attente de la base de donn√©es...")
    
    try:
        from app.database import engine
        from sqlalchemy import text
        
        max_attempts = 30
        attempt = 0
        
        while attempt < max_attempts:
            try:
                with engine.connect() as conn:
                    conn.execute(text("SELECT 1"))
                print("‚úÖ Base de donn√©es connect√©e")
                return True
            except Exception as e:
                attempt += 1
                print(f"‚è≥ Tentative {attempt}/{max_attempts} - Base de donn√©es non pr√™te: {e}")
                time.sleep(2)
        
        print("‚ùå Impossible de se connecter √† la base de donn√©es apr√®s 30 tentatives")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la base de donn√©es: {e}")
        return False

def create_tables():
    """Cr√©er les tables de base de donn√©es"""
    print("üîÑ Cr√©ation des tables de base de donn√©es...")
    
    try:
        from app.database import create_tables as create_tables_func
        create_tables_func()
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def run_migrations():
    """Ex√©cuter les migrations"""
    print("üîÑ Ex√©cution des migrations...")
    
    try:
        from migrations.migration_manager import run_migrations as run_migrations_func
        
        if not run_migrations_func():
            print("‚ùå √âchec des migrations")
            return False
        else:
            print("‚úÖ Migrations ex√©cut√©es avec succ√®s")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des migrations: {e}")
        return False

def main():
    """D√©marrer l'application FastAPI"""
    print("üöÄ D√©marrage de GEEK TECHNOLOGIE - Gestion de Stock")
    print("=" * 50)
    
    # Attendre la base de donn√©es
    if not wait_for_database():
        print("‚ùå Impossible de d√©marrer sans base de donn√©es")
        sys.exit(1)
    
    # Cr√©er les tables de base
    if not create_tables():
        print("‚ùå Impossible de d√©marrer sans tables")
        sys.exit(1)
    
    # Ex√©cuter les migrations
    if not run_migrations():
        print("‚ùå Impossible de d√©marrer sans migrations")
        sys.exit(1)
    
    # Configuration
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    # D√©sactiver le reload par d√©faut en production (Koyeb)
    reload = os.getenv("RELOAD", "false").lower() == "true"
    
    print(f"üìç Serveur: http://{host}:{port}")
    print(f"üîÑ Rechargement automatique: {'Activ√©' if reload else 'D√©sactiv√©'}")
    print(f"üóÑÔ∏è  Base de donn√©es: PostgreSQL")
    print("=" * 50)
    print("üí° Comptes par d√©faut:")
    print("   - Admin: admin / admin")
    print("   - Utilisateur: user / user")
    print("=" * 50)
    
    try:
        uvicorn.run(
            "main:app",
            host=host,
            port=port,
            reload=reload,
            log_level="info",
            access_log=True
        )
    except KeyboardInterrupt:
        print("\nüëã Arr√™t de l'application")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
